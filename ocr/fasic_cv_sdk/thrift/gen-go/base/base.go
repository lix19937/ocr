// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package base

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Open
//  - Env
type TrafficEnv struct {
  Open bool `thrift:"Open,1" db:"Open" json:"Open"`
  Env string `thrift:"Env,2" db:"Env" json:"Env"`
}

func NewTrafficEnv() *TrafficEnv {
  return &TrafficEnv{}
}


func (p *TrafficEnv) GetOpen() bool {
  return p.Open
}

func (p *TrafficEnv) GetEnv() string {
  return p.Env
}
func (p *TrafficEnv) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TrafficEnv)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Open = v
}
  return nil
}

func (p *TrafficEnv)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Env = v
}
  return nil
}

func (p *TrafficEnv) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TrafficEnv"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TrafficEnv) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Open", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Open: ", p), err) }
  if err := oprot.WriteBool(bool(p.Open)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Open (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Open: ", p), err) }
  return err
}

func (p *TrafficEnv) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Env", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Env: ", p), err) }
  if err := oprot.WriteString(string(p.Env)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Env (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Env: ", p), err) }
  return err
}

func (p *TrafficEnv) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TrafficEnv(%+v)", *p)
}

// Attributes:
//  - LogID
//  - Caller
//  - Addr
//  - Client
//  - TrafficEnv
//  - Extra
type Base struct {
  LogID string `thrift:"LogID,1" db:"LogID" json:"LogID"`
  Caller string `thrift:"Caller,2" db:"Caller" json:"Caller"`
  Addr string `thrift:"Addr,3" db:"Addr" json:"Addr"`
  Client string `thrift:"Client,4" db:"Client" json:"Client"`
  TrafficEnv *TrafficEnv `thrift:"trafficEnv,5" db:"trafficEnv" json:"trafficEnv,omitempty"`
  Extra map[string]string `thrift:"extra,6" db:"extra" json:"extra,omitempty"`
}

func NewBase() *Base {
  return &Base{}
}


func (p *Base) GetLogID() string {
  return p.LogID
}

func (p *Base) GetCaller() string {
  return p.Caller
}

func (p *Base) GetAddr() string {
  return p.Addr
}

func (p *Base) GetClient() string {
  return p.Client
}
var Base_TrafficEnv_DEFAULT *TrafficEnv
func (p *Base) GetTrafficEnv() *TrafficEnv {
  if !p.IsSetTrafficEnv() {
    return Base_TrafficEnv_DEFAULT
  }
return p.TrafficEnv
}
var Base_Extra_DEFAULT map[string]string

func (p *Base) GetExtra() map[string]string {
  return p.Extra
}
func (p *Base) IsSetTrafficEnv() bool {
  return p.TrafficEnv != nil
}

func (p *Base) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *Base) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Base)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LogID = v
}
  return nil
}

func (p *Base)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Caller = v
}
  return nil
}

func (p *Base)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Addr = v
}
  return nil
}

func (p *Base)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Client = v
}
  return nil
}

func (p *Base)  ReadField5(iprot thrift.TProtocol) error {
  p.TrafficEnv = &TrafficEnv{}
  if err := p.TrafficEnv.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TrafficEnv), err)
  }
  return nil
}

func (p *Base)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Extra[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Base) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Base"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Base) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("LogID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:LogID: ", p), err) }
  if err := oprot.WriteString(string(p.LogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.LogID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:LogID: ", p), err) }
  return err
}

func (p *Base) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Caller", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Caller: ", p), err) }
  if err := oprot.WriteString(string(p.Caller)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Caller (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Caller: ", p), err) }
  return err
}

func (p *Base) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Addr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Addr: ", p), err) }
  if err := oprot.WriteString(string(p.Addr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Addr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Addr: ", p), err) }
  return err
}

func (p *Base) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Client", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Client: ", p), err) }
  if err := oprot.WriteString(string(p.Client)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Client (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Client: ", p), err) }
  return err
}

func (p *Base) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTrafficEnv() {
    if err := oprot.WriteFieldBegin("trafficEnv", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trafficEnv: ", p), err) }
    if err := p.TrafficEnv.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TrafficEnv), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trafficEnv: ", p), err) }
  }
  return err
}

func (p *Base) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin("extra", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extra: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extra: ", p), err) }
  }
  return err
}

func (p *Base) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Base(%+v)", *p)
}

// Attributes:
//  - StatusMessage
//  - StatusCode
type BaseResp struct {
  StatusMessage string `thrift:"StatusMessage,1" db:"StatusMessage" json:"StatusMessage"`
  StatusCode int32 `thrift:"StatusCode,2" db:"StatusCode" json:"StatusCode"`
}

func NewBaseResp() *BaseResp {
  return &BaseResp{}
}


func (p *BaseResp) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *BaseResp) GetStatusCode() int32 {
  return p.StatusCode
}
func (p *BaseResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *BaseResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StatusCode = v
}
  return nil
}

func (p *BaseResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BaseResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("StatusMessage", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:StatusMessage: ", p), err) }
  if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.StatusMessage (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:StatusMessage: ", p), err) }
  return err
}

func (p *BaseResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("StatusCode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:StatusCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.StatusCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.StatusCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:StatusCode: ", p), err) }
  return err
}

func (p *BaseResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseResp(%+v)", *p)
}

