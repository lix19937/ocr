// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cv_types

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"base"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
type BoxTag int64
const (
  BoxTag_class_01 BoxTag = 0
  BoxTag_class_02 BoxTag = 1
)

func (p BoxTag) String() string {
  switch p {
  case BoxTag_class_01: return "class_01"
  case BoxTag_class_02: return "class_02"
  }
  return "<UNSET>"
}

func BoxTagFromString(s string) (BoxTag, error) {
  switch s {
  case "class_01": return BoxTag_class_01, nil 
  case "class_02": return BoxTag_class_02, nil 
  }
  return BoxTag(0), fmt.Errorf("not a valid BoxTag string")
}


func BoxTagPtr(v BoxTag) *BoxTag { return &v }

func (p BoxTag) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BoxTag) UnmarshalText(text []byte) error {
q, err := BoxTagFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BoxTag) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BoxTag(v)
return nil
}

func (p * BoxTag) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ImageFormat int64
const (
  ImageFormat_JPG ImageFormat = 0
  ImageFormat_PNG ImageFormat = 1
  ImageFormat_WEBP ImageFormat = 2
)

func (p ImageFormat) String() string {
  switch p {
  case ImageFormat_JPG: return "JPG"
  case ImageFormat_PNG: return "PNG"
  case ImageFormat_WEBP: return "WEBP"
  }
  return "<UNSET>"
}

func ImageFormatFromString(s string) (ImageFormat, error) {
  switch s {
  case "JPG": return ImageFormat_JPG, nil 
  case "PNG": return ImageFormat_PNG, nil 
  case "WEBP": return ImageFormat_WEBP, nil 
  }
  return ImageFormat(0), fmt.Errorf("not a valid ImageFormat string")
}


func ImageFormatPtr(v ImageFormat) *ImageFormat { return &v }

func (p ImageFormat) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ImageFormat) UnmarshalText(text []byte) error {
q, err := ImageFormatFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ImageFormat) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ImageFormat(v)
return nil
}

func (p * ImageFormat) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FaceExpTypes int64
const (
  FaceExpTypes_neutral FaceExpTypes = 0
  FaceExpTypes_angry FaceExpTypes = 1
  FaceExpTypes_disgust FaceExpTypes = 2
  FaceExpTypes_fear FaceExpTypes = 3
  FaceExpTypes_happy FaceExpTypes = 4
  FaceExpTypes_sad FaceExpTypes = 5
  FaceExpTypes_surprise FaceExpTypes = 6
)

func (p FaceExpTypes) String() string {
  switch p {
  case FaceExpTypes_neutral: return "neutral"
  case FaceExpTypes_angry: return "angry"
  case FaceExpTypes_disgust: return "disgust"
  case FaceExpTypes_fear: return "fear"
  case FaceExpTypes_happy: return "happy"
  case FaceExpTypes_sad: return "sad"
  case FaceExpTypes_surprise: return "surprise"
  }
  return "<UNSET>"
}

func FaceExpTypesFromString(s string) (FaceExpTypes, error) {
  switch s {
  case "neutral": return FaceExpTypes_neutral, nil 
  case "angry": return FaceExpTypes_angry, nil 
  case "disgust": return FaceExpTypes_disgust, nil 
  case "fear": return FaceExpTypes_fear, nil 
  case "happy": return FaceExpTypes_happy, nil 
  case "sad": return FaceExpTypes_sad, nil 
  case "surprise": return FaceExpTypes_surprise, nil 
  }
  return FaceExpTypes(0), fmt.Errorf("not a valid FaceExpTypes string")
}


func FaceExpTypesPtr(v FaceExpTypes) *FaceExpTypes { return &v }

func (p FaceExpTypes) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FaceExpTypes) UnmarshalText(text []byte) error {
q, err := FaceExpTypesFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FaceExpTypes) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FaceExpTypes(v)
return nil
}

func (p * FaceExpTypes) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccLevel int64
const (
  AccLevel_facial_5 AccLevel = 5
  AccLevel_facial_poor AccLevel = 68
  AccLevel_facial_mid AccLevel = 106
  AccLevel_facial_rich AccLevel = 144
  AccLevel_body_poor AccLevel = 16
  AccLevel_body_rich AccLevel = 59
)

func (p AccLevel) String() string {
  switch p {
  case AccLevel_facial_5: return "facial_5"
  case AccLevel_facial_poor: return "facial_poor"
  case AccLevel_facial_mid: return "facial_mid"
  case AccLevel_facial_rich: return "facial_rich"
  case AccLevel_body_poor: return "body_poor"
  case AccLevel_body_rich: return "body_rich"
  }
  return "<UNSET>"
}

func AccLevelFromString(s string) (AccLevel, error) {
  switch s {
  case "facial_5": return AccLevel_facial_5, nil 
  case "facial_poor": return AccLevel_facial_poor, nil 
  case "facial_mid": return AccLevel_facial_mid, nil 
  case "facial_rich": return AccLevel_facial_rich, nil 
  case "body_poor": return AccLevel_body_poor, nil 
  case "body_rich": return AccLevel_body_rich, nil 
  }
  return AccLevel(0), fmt.Errorf("not a valid AccLevel string")
}


func AccLevelPtr(v AccLevel) *AccLevel { return &v }

func (p AccLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccLevel) UnmarshalText(text []byte) error {
q, err := AccLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccLevel(v)
return nil
}

func (p * AccLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - X
//  - Y
type Point struct {
  X float64 `thrift:"x,1" db:"x" json:"x"`
  Y float64 `thrift:"y,2" db:"y" json:"y"`
}

func NewPoint() *Point {
  return &Point{}
}


func (p *Point) GetX() float64 {
  return p.X
}

func (p *Point) GetY() float64 {
  return p.Y
}
func (p *Point) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Point)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.X = v
}
  return nil
}

func (p *Point)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Y = v
}
  return nil
}

func (p *Point) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Point"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Point) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("x", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:x: ", p), err) }
  if err := oprot.WriteDouble(float64(p.X)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.x (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:x: ", p), err) }
  return err
}

func (p *Point) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("y", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:y: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Y)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.y (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:y: ", p), err) }
  return err
}

func (p *Point) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Point(%+v)", *p)
}

// Attributes:
//  - ImageURL
//  - ImageData
type ImageInfo struct {
  ImageURL string `thrift:"image_url,1" db:"image_url" json:"image_url"`
  ImageData []byte `thrift:"image_data,2" db:"image_data" json:"image_data,omitempty"`
}

func NewImageInfo() *ImageInfo {
  return &ImageInfo{}
}


func (p *ImageInfo) GetImageURL() string {
  return p.ImageURL
}
var ImageInfo_ImageData_DEFAULT []byte

func (p *ImageInfo) GetImageData() []byte {
  return p.ImageData
}
func (p *ImageInfo) IsSetImageData() bool {
  return p.ImageData != nil
}

func (p *ImageInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImageURL = v
}
  return nil
}

func (p *ImageInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ImageData = v
}
  return nil
}

func (p *ImageInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image_url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image_url: ", p), err) }
  if err := oprot.WriteString(string(p.ImageURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image_url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image_url: ", p), err) }
  return err
}

func (p *ImageInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetImageData() {
    if err := oprot.WriteFieldBegin("image_data", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:image_data: ", p), err) }
    if err := oprot.WriteBinary(p.ImageData); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.image_data (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:image_data: ", p), err) }
  }
  return err
}

func (p *ImageInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageInfo(%+v)", *p)
}

// Attributes:
//  - P1
//  - P2
//  - Width
//  - Height
//  - Prob
//  - Tag
type BoundingBox struct {
  P1 *Point `thrift:"p1,1" db:"p1" json:"p1"`
  P2 *Point `thrift:"p2,2" db:"p2" json:"p2"`
  Width *int32 `thrift:"width,3" db:"width" json:"width,omitempty"`
  Height *int32 `thrift:"height,4" db:"height" json:"height,omitempty"`
  Prob *float64 `thrift:"prob,5" db:"prob" json:"prob,omitempty"`
  Tag *BoxTag `thrift:"tag,6" db:"tag" json:"tag,omitempty"`
}

func NewBoundingBox() *BoundingBox {
  return &BoundingBox{}
}

var BoundingBox_P1_DEFAULT *Point
func (p *BoundingBox) GetP1() *Point {
  if !p.IsSetP1() {
    return BoundingBox_P1_DEFAULT
  }
return p.P1
}
var BoundingBox_P2_DEFAULT *Point
func (p *BoundingBox) GetP2() *Point {
  if !p.IsSetP2() {
    return BoundingBox_P2_DEFAULT
  }
return p.P2
}
var BoundingBox_Width_DEFAULT int32
func (p *BoundingBox) GetWidth() int32 {
  if !p.IsSetWidth() {
    return BoundingBox_Width_DEFAULT
  }
return *p.Width
}
var BoundingBox_Height_DEFAULT int32
func (p *BoundingBox) GetHeight() int32 {
  if !p.IsSetHeight() {
    return BoundingBox_Height_DEFAULT
  }
return *p.Height
}
var BoundingBox_Prob_DEFAULT float64
func (p *BoundingBox) GetProb() float64 {
  if !p.IsSetProb() {
    return BoundingBox_Prob_DEFAULT
  }
return *p.Prob
}
var BoundingBox_Tag_DEFAULT BoxTag
func (p *BoundingBox) GetTag() BoxTag {
  if !p.IsSetTag() {
    return BoundingBox_Tag_DEFAULT
  }
return *p.Tag
}
func (p *BoundingBox) IsSetP1() bool {
  return p.P1 != nil
}

func (p *BoundingBox) IsSetP2() bool {
  return p.P2 != nil
}

func (p *BoundingBox) IsSetWidth() bool {
  return p.Width != nil
}

func (p *BoundingBox) IsSetHeight() bool {
  return p.Height != nil
}

func (p *BoundingBox) IsSetProb() bool {
  return p.Prob != nil
}

func (p *BoundingBox) IsSetTag() bool {
  return p.Tag != nil
}

func (p *BoundingBox) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoundingBox)  ReadField1(iprot thrift.TProtocol) error {
  p.P1 = &Point{}
  if err := p.P1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.P1), err)
  }
  return nil
}

func (p *BoundingBox)  ReadField2(iprot thrift.TProtocol) error {
  p.P2 = &Point{}
  if err := p.P2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.P2), err)
  }
  return nil
}

func (p *BoundingBox)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Width = &v
}
  return nil
}

func (p *BoundingBox)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Height = &v
}
  return nil
}

func (p *BoundingBox)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Prob = &v
}
  return nil
}

func (p *BoundingBox)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := BoxTag(v)
  p.Tag = &temp
}
  return nil
}

func (p *BoundingBox) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BoundingBox"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoundingBox) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("p1", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:p1: ", p), err) }
  if err := p.P1.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.P1), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:p1: ", p), err) }
  return err
}

func (p *BoundingBox) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("p2", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:p2: ", p), err) }
  if err := p.P2.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.P2), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:p2: ", p), err) }
  return err
}

func (p *BoundingBox) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetWidth() {
    if err := oprot.WriteFieldBegin("width", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:width: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Width)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.width (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:width: ", p), err) }
  }
  return err
}

func (p *BoundingBox) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeight() {
    if err := oprot.WriteFieldBegin("height", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:height: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Height)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.height (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:height: ", p), err) }
  }
  return err
}

func (p *BoundingBox) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetProb() {
    if err := oprot.WriteFieldBegin("prob", thrift.DOUBLE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:prob: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Prob)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prob (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:prob: ", p), err) }
  }
  return err
}

func (p *BoundingBox) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetTag() {
    if err := oprot.WriteFieldBegin("tag", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tag: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Tag)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tag: ", p), err) }
  }
  return err
}

func (p *BoundingBox) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoundingBox(%+v)", *p)
}

// Attributes:
//  - Quality
type JpgParam struct {
  Quality int32 `thrift:"quality,1" db:"quality" json:"quality"`
}

func NewJpgParam() *JpgParam {
  return &JpgParam{
Quality: 95,
}
}

var JpgParam_Quality_DEFAULT int32 = 95

func (p *JpgParam) GetQuality() int32 {
  return p.Quality
}
func (p *JpgParam) IsSetQuality() bool {
  return p.Quality != JpgParam_Quality_DEFAULT
}

func (p *JpgParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JpgParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Quality = v
}
  return nil
}

func (p *JpgParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JpgParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JpgParam) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetQuality() {
    if err := oprot.WriteFieldBegin("quality", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:quality: ", p), err) }
    if err := oprot.WriteI32(int32(p.Quality)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.quality (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:quality: ", p), err) }
  }
  return err
}

func (p *JpgParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JpgParam(%+v)", *p)
}

// Attributes:
//  - Level
type PngParam struct {
  Level int32 `thrift:"level,1" db:"level" json:"level"`
}

func NewPngParam() *PngParam {
  return &PngParam{
Level: 3,
}
}

var PngParam_Level_DEFAULT int32 = 3

func (p *PngParam) GetLevel() int32 {
  return p.Level
}
func (p *PngParam) IsSetLevel() bool {
  return p.Level != PngParam_Level_DEFAULT
}

func (p *PngParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PngParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *PngParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PngParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PngParam) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetLevel() {
    if err := oprot.WriteFieldBegin("level", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:level: ", p), err) }
    if err := oprot.WriteI32(int32(p.Level)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.level (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:level: ", p), err) }
  }
  return err
}

func (p *PngParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PngParam(%+v)", *p)
}

// Attributes:
//  - Quality
type WebpParam struct {
  Quality int32 `thrift:"quality,1" db:"quality" json:"quality"`
}

func NewWebpParam() *WebpParam {
  return &WebpParam{
Quality: 100,
}
}

var WebpParam_Quality_DEFAULT int32 = 100

func (p *WebpParam) GetQuality() int32 {
  return p.Quality
}
func (p *WebpParam) IsSetQuality() bool {
  return p.Quality != WebpParam_Quality_DEFAULT
}

func (p *WebpParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WebpParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Quality = v
}
  return nil
}

func (p *WebpParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WebpParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WebpParam) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetQuality() {
    if err := oprot.WriteFieldBegin("quality", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:quality: ", p), err) }
    if err := oprot.WriteI32(int32(p.Quality)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.quality (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:quality: ", p), err) }
  }
  return err
}

func (p *WebpParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WebpParam(%+v)", *p)
}

// Attributes:
//  - Image
//  - OutputWidth
//  - OutputHeight
//  - OutputFormat
//  - JpgParam
//  - PngParam
//  - WebpParam
type ImageSpec struct {
  Image *ImageInfo `thrift:"image,1" db:"image" json:"image,omitempty"`
  OutputWidth *int32 `thrift:"output_width,2" db:"output_width" json:"output_width,omitempty"`
  OutputHeight *int32 `thrift:"output_height,3" db:"output_height" json:"output_height,omitempty"`
  OutputFormat *ImageFormat `thrift:"output_format,4" db:"output_format" json:"output_format,omitempty"`
  JpgParam *JpgParam `thrift:"jpg_param,5" db:"jpg_param" json:"jpg_param,omitempty"`
  PngParam *PngParam `thrift:"png_param,6" db:"png_param" json:"png_param,omitempty"`
  WebpParam *WebpParam `thrift:"webp_param,7" db:"webp_param" json:"webp_param,omitempty"`
}

func NewImageSpec() *ImageSpec {
  return &ImageSpec{}
}

var ImageSpec_Image_DEFAULT *ImageInfo
func (p *ImageSpec) GetImage() *ImageInfo {
  if !p.IsSetImage() {
    return ImageSpec_Image_DEFAULT
  }
return p.Image
}
var ImageSpec_OutputWidth_DEFAULT int32
func (p *ImageSpec) GetOutputWidth() int32 {
  if !p.IsSetOutputWidth() {
    return ImageSpec_OutputWidth_DEFAULT
  }
return *p.OutputWidth
}
var ImageSpec_OutputHeight_DEFAULT int32
func (p *ImageSpec) GetOutputHeight() int32 {
  if !p.IsSetOutputHeight() {
    return ImageSpec_OutputHeight_DEFAULT
  }
return *p.OutputHeight
}
var ImageSpec_OutputFormat_DEFAULT ImageFormat
func (p *ImageSpec) GetOutputFormat() ImageFormat {
  if !p.IsSetOutputFormat() {
    return ImageSpec_OutputFormat_DEFAULT
  }
return *p.OutputFormat
}
var ImageSpec_JpgParam_DEFAULT *JpgParam
func (p *ImageSpec) GetJpgParam() *JpgParam {
  if !p.IsSetJpgParam() {
    return ImageSpec_JpgParam_DEFAULT
  }
return p.JpgParam
}
var ImageSpec_PngParam_DEFAULT *PngParam
func (p *ImageSpec) GetPngParam() *PngParam {
  if !p.IsSetPngParam() {
    return ImageSpec_PngParam_DEFAULT
  }
return p.PngParam
}
var ImageSpec_WebpParam_DEFAULT *WebpParam
func (p *ImageSpec) GetWebpParam() *WebpParam {
  if !p.IsSetWebpParam() {
    return ImageSpec_WebpParam_DEFAULT
  }
return p.WebpParam
}
func (p *ImageSpec) IsSetImage() bool {
  return p.Image != nil
}

func (p *ImageSpec) IsSetOutputWidth() bool {
  return p.OutputWidth != nil
}

func (p *ImageSpec) IsSetOutputHeight() bool {
  return p.OutputHeight != nil
}

func (p *ImageSpec) IsSetOutputFormat() bool {
  return p.OutputFormat != nil
}

func (p *ImageSpec) IsSetJpgParam() bool {
  return p.JpgParam != nil
}

func (p *ImageSpec) IsSetPngParam() bool {
  return p.PngParam != nil
}

func (p *ImageSpec) IsSetWebpParam() bool {
  return p.WebpParam != nil
}

func (p *ImageSpec) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageSpec)  ReadField1(iprot thrift.TProtocol) error {
  p.Image = &ImageInfo{}
  if err := p.Image.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Image), err)
  }
  return nil
}

func (p *ImageSpec)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OutputWidth = &v
}
  return nil
}

func (p *ImageSpec)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OutputHeight = &v
}
  return nil
}

func (p *ImageSpec)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := ImageFormat(v)
  p.OutputFormat = &temp
}
  return nil
}

func (p *ImageSpec)  ReadField5(iprot thrift.TProtocol) error {
  p.JpgParam = &JpgParam{
  Quality: 95,
}
  if err := p.JpgParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JpgParam), err)
  }
  return nil
}

func (p *ImageSpec)  ReadField6(iprot thrift.TProtocol) error {
  p.PngParam = &PngParam{
  Level: 3,
}
  if err := p.PngParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PngParam), err)
  }
  return nil
}

func (p *ImageSpec)  ReadField7(iprot thrift.TProtocol) error {
  p.WebpParam = &WebpParam{
  Quality: 100,
}
  if err := p.WebpParam.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WebpParam), err)
  }
  return nil
}

func (p *ImageSpec) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageSpec) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetImage() {
    if err := oprot.WriteFieldBegin("image", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image: ", p), err) }
    if err := p.Image.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Image), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image: ", p), err) }
  }
  return err
}

func (p *ImageSpec) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputWidth() {
    if err := oprot.WriteFieldBegin("output_width", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:output_width: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OutputWidth)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.output_width (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:output_width: ", p), err) }
  }
  return err
}

func (p *ImageSpec) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputHeight() {
    if err := oprot.WriteFieldBegin("output_height", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:output_height: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OutputHeight)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.output_height (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:output_height: ", p), err) }
  }
  return err
}

func (p *ImageSpec) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputFormat() {
    if err := oprot.WriteFieldBegin("output_format", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:output_format: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OutputFormat)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.output_format (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:output_format: ", p), err) }
  }
  return err
}

func (p *ImageSpec) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetJpgParam() {
    if err := oprot.WriteFieldBegin("jpg_param", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:jpg_param: ", p), err) }
    if err := p.JpgParam.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JpgParam), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:jpg_param: ", p), err) }
  }
  return err
}

func (p *ImageSpec) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPngParam() {
    if err := oprot.WriteFieldBegin("png_param", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:png_param: ", p), err) }
    if err := p.PngParam.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PngParam), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:png_param: ", p), err) }
  }
  return err
}

func (p *ImageSpec) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetWebpParam() {
    if err := oprot.WriteFieldBegin("webp_param", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:webp_param: ", p), err) }
    if err := p.WebpParam.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WebpParam), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:webp_param: ", p), err) }
  }
  return err
}

func (p *ImageSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageSpec(%+v)", *p)
}

// Attributes:
//  - ModelVersion
type ModelVersion struct {
  ModelVersion string `thrift:"model_version,1" db:"model_version" json:"model_version"`
}

func NewModelVersion() *ModelVersion {
  return &ModelVersion{}
}


func (p *ModelVersion) GetModelVersion() string {
  return p.ModelVersion
}
func (p *ModelVersion) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelVersion)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelVersion = v
}
  return nil
}

func (p *ModelVersion) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ModelVersion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelVersion) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model_version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:model_version: ", p), err) }
  if err := oprot.WriteString(string(p.ModelVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:model_version: ", p), err) }
  return err
}

func (p *ModelVersion) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelVersion(%+v)", *p)
}

// Attributes:
//  - Status
//  - Base
type ModelVersionReq struct {
  Status *string `thrift:"status,1" db:"status" json:"status,omitempty"`
  // unused fields # 2 to 254
  Base *base.Base `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewModelVersionReq() *ModelVersionReq {
  return &ModelVersionReq{}
}

var ModelVersionReq_Status_DEFAULT string
func (p *ModelVersionReq) GetStatus() string {
  if !p.IsSetStatus() {
    return ModelVersionReq_Status_DEFAULT
  }
return *p.Status
}
var ModelVersionReq_Base_DEFAULT *base.Base
func (p *ModelVersionReq) GetBase() *base.Base {
  if !p.IsSetBase() {
    return ModelVersionReq_Base_DEFAULT
  }
return p.Base
}
func (p *ModelVersionReq) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ModelVersionReq) IsSetBase() bool {
  return p.Base != nil
}

func (p *ModelVersionReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelVersionReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *ModelVersionReq)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *ModelVersionReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ModelVersionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelVersionReq) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := oprot.WriteString(string(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *ModelVersionReq) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBase() {
    if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err) }
    if err := p.Base.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err) }
  }
  return err
}

func (p *ModelVersionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelVersionReq(%+v)", *p)
}

// Attributes:
//  - ModelVersion
//  - BaseResp
type ModelVersionRsp struct {
  ModelVersion *ModelVersion `thrift:"model_version,1" db:"model_version" json:"model_version"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewModelVersionRsp() *ModelVersionRsp {
  return &ModelVersionRsp{}
}

var ModelVersionRsp_ModelVersion_DEFAULT *ModelVersion
func (p *ModelVersionRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return ModelVersionRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var ModelVersionRsp_BaseResp_DEFAULT *base.BaseResp
func (p *ModelVersionRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return ModelVersionRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *ModelVersionRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *ModelVersionRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *ModelVersionRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelVersionRsp)  ReadField1(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *ModelVersionRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *ModelVersionRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ModelVersionRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelVersionRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:model_version: ", p), err) }
  if err := p.ModelVersion.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:model_version: ", p), err) }
  return err
}

func (p *ModelVersionRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *ModelVersionRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelVersionRsp(%+v)", *p)
}

// Attributes:
//  - URL
//  - ErrorMsg
type VisionException struct {
  URL string `thrift:"url,1" db:"url" json:"url"`
  ErrorMsg string `thrift:"error_msg,2" db:"error_msg" json:"error_msg"`
}

func NewVisionException() *VisionException {
  return &VisionException{}
}


func (p *VisionException) GetURL() string {
  return p.URL
}

func (p *VisionException) GetErrorMsg() string {
  return p.ErrorMsg
}
func (p *VisionException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *VisionException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *VisionException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VisionException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err) }
  return err
}

func (p *VisionException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_msg: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_msg: ", p), err) }
  return err
}

func (p *VisionException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionException(%+v)", *p)
}

func (p *VisionException) Error() string {
  return p.String()
}

// Attributes:
//  - TagID
//  - Prob
//  - TagName
//  - ModelName
//  - Extra
//  - Points
//  - NormProb
type TagPredict struct {
  TagID int32 `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  Prob float64 `thrift:"prob,2" db:"prob" json:"prob"`
  TagName *string `thrift:"tag_name,3" db:"tag_name" json:"tag_name,omitempty"`
  ModelName *string `thrift:"model_name,4" db:"model_name" json:"model_name,omitempty"`
  Extra map[string]string `thrift:"extra,5" db:"extra" json:"extra,omitempty"`
  Points []*Point `thrift:"points,6" db:"points" json:"points,omitempty"`
  NormProb *float64 `thrift:"norm_prob,7" db:"norm_prob" json:"norm_prob,omitempty"`
}

func NewTagPredict() *TagPredict {
  return &TagPredict{}
}


func (p *TagPredict) GetTagID() int32 {
  return p.TagID
}

func (p *TagPredict) GetProb() float64 {
  return p.Prob
}
var TagPredict_TagName_DEFAULT string
func (p *TagPredict) GetTagName() string {
  if !p.IsSetTagName() {
    return TagPredict_TagName_DEFAULT
  }
return *p.TagName
}
var TagPredict_ModelName_DEFAULT string
func (p *TagPredict) GetModelName() string {
  if !p.IsSetModelName() {
    return TagPredict_ModelName_DEFAULT
  }
return *p.ModelName
}
var TagPredict_Extra_DEFAULT map[string]string

func (p *TagPredict) GetExtra() map[string]string {
  return p.Extra
}
var TagPredict_Points_DEFAULT []*Point

func (p *TagPredict) GetPoints() []*Point {
  return p.Points
}
var TagPredict_NormProb_DEFAULT float64
func (p *TagPredict) GetNormProb() float64 {
  if !p.IsSetNormProb() {
    return TagPredict_NormProb_DEFAULT
  }
return *p.NormProb
}
func (p *TagPredict) IsSetTagName() bool {
  return p.TagName != nil
}

func (p *TagPredict) IsSetModelName() bool {
  return p.ModelName != nil
}

func (p *TagPredict) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *TagPredict) IsSetPoints() bool {
  return p.Points != nil
}

func (p *TagPredict) IsSetNormProb() bool {
  return p.NormProb != nil
}

func (p *TagPredict) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TagPredict)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TagID = v
}
  return nil
}

func (p *TagPredict)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Prob = v
}
  return nil
}

func (p *TagPredict)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TagName = &v
}
  return nil
}

func (p *TagPredict)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ModelName = &v
}
  return nil
}

func (p *TagPredict)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Extra[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TagPredict)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Point, 0, size)
  p.Points =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Point{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Points = append(p.Points, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TagPredict)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NormProb = &v
}
  return nil
}

func (p *TagPredict) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TagPredict"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TagPredict) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *TagPredict) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prob", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prob: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Prob)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prob (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prob: ", p), err) }
  return err
}

func (p *TagPredict) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTagName() {
    if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tag_name: ", p), err) }
    if err := oprot.WriteString(string(*p.TagName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_name (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tag_name: ", p), err) }
  }
  return err
}

func (p *TagPredict) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelName() {
    if err := oprot.WriteFieldBegin("model_name", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:model_name: ", p), err) }
    if err := oprot.WriteString(string(*p.ModelName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.model_name (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:model_name: ", p), err) }
  }
  return err
}

func (p *TagPredict) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin("extra", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extra: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extra: ", p), err) }
  }
  return err
}

func (p *TagPredict) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPoints() {
    if err := oprot.WriteFieldBegin("points", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:points: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Points)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Points {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:points: ", p), err) }
  }
  return err
}

func (p *TagPredict) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetNormProb() {
    if err := oprot.WriteFieldBegin("norm_prob", thrift.DOUBLE, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:norm_prob: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.NormProb)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.norm_prob (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:norm_prob: ", p), err) }
  }
  return err
}

func (p *TagPredict) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TagPredict(%+v)", *p)
}

// Attributes:
//  - Predicts
//  - Embeding
type TagPredictResult_ struct {
  Predicts []*TagPredict `thrift:"predicts,1" db:"predicts" json:"predicts"`
  Embeding []float64 `thrift:"embeding,2" db:"embeding" json:"embeding"`
}

func NewTagPredictResult_() *TagPredictResult_ {
  return &TagPredictResult_{}
}


func (p *TagPredictResult_) GetPredicts() []*TagPredict {
  return p.Predicts
}

func (p *TagPredictResult_) GetEmbeding() []float64 {
  return p.Embeding
}
func (p *TagPredictResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TagPredictResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TagPredict, 0, size)
  p.Predicts =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &TagPredict{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Predicts = append(p.Predicts, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TagPredictResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.Embeding =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.Embeding = append(p.Embeding, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TagPredictResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TagPredictResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TagPredictResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("predicts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:predicts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Predicts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Predicts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:predicts: ", p), err) }
  return err
}

func (p *TagPredictResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("embeding", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:embeding: ", p), err) }
  if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.Embeding)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Embeding {
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:embeding: ", p), err) }
  return err
}

func (p *TagPredictResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TagPredictResult_(%+v)", *p)
}

// Attributes:
//  - Image
//  - Extra
//  - Base
type ImagePredictReq struct {
  Image *ImageInfo `thrift:"image,1" db:"image" json:"image"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra,omitempty"`
  // unused fields # 3 to 254
  Base *base.Base `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewImagePredictReq() *ImagePredictReq {
  return &ImagePredictReq{}
}

var ImagePredictReq_Image_DEFAULT *ImageInfo
func (p *ImagePredictReq) GetImage() *ImageInfo {
  if !p.IsSetImage() {
    return ImagePredictReq_Image_DEFAULT
  }
return p.Image
}
var ImagePredictReq_Extra_DEFAULT map[string]string

func (p *ImagePredictReq) GetExtra() map[string]string {
  return p.Extra
}
var ImagePredictReq_Base_DEFAULT *base.Base
func (p *ImagePredictReq) GetBase() *base.Base {
  if !p.IsSetBase() {
    return ImagePredictReq_Base_DEFAULT
  }
return p.Base
}
func (p *ImagePredictReq) IsSetImage() bool {
  return p.Image != nil
}

func (p *ImagePredictReq) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *ImagePredictReq) IsSetBase() bool {
  return p.Base != nil
}

func (p *ImagePredictReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImagePredictReq)  ReadField1(iprot thrift.TProtocol) error {
  p.Image = &ImageInfo{}
  if err := p.Image.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Image), err)
  }
  return nil
}

func (p *ImagePredictReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
var _val6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val6 = v
}
    p.Extra[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ImagePredictReq)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *ImagePredictReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImagePredictReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImagePredictReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image: ", p), err) }
  if err := p.Image.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Image), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image: ", p), err) }
  return err
}

func (p *ImagePredictReq) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  }
  return err
}

func (p *ImagePredictReq) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBase() {
    if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err) }
    if err := p.Base.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err) }
  }
  return err
}

func (p *ImagePredictReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImagePredictReq(%+v)", *p)
}

// Attributes:
//  - VideoURL
//  - Frames
//  - Extra
//  - Base
type VideoPredictReq struct {
  VideoURL string `thrift:"video_url,1" db:"video_url" json:"video_url"`
  Frames []*ImageInfo `thrift:"frames,2" db:"frames" json:"frames,omitempty"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra,omitempty"`
  // unused fields # 4 to 254
  Base *base.Base `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewVideoPredictReq() *VideoPredictReq {
  return &VideoPredictReq{}
}


func (p *VideoPredictReq) GetVideoURL() string {
  return p.VideoURL
}
var VideoPredictReq_Frames_DEFAULT []*ImageInfo

func (p *VideoPredictReq) GetFrames() []*ImageInfo {
  return p.Frames
}
var VideoPredictReq_Extra_DEFAULT map[string]string

func (p *VideoPredictReq) GetExtra() map[string]string {
  return p.Extra
}
var VideoPredictReq_Base_DEFAULT *base.Base
func (p *VideoPredictReq) GetBase() *base.Base {
  if !p.IsSetBase() {
    return VideoPredictReq_Base_DEFAULT
  }
return p.Base
}
func (p *VideoPredictReq) IsSetFrames() bool {
  return p.Frames != nil
}

func (p *VideoPredictReq) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *VideoPredictReq) IsSetBase() bool {
  return p.Base != nil
}

func (p *VideoPredictReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VideoPredictReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.VideoURL = v
}
  return nil
}

func (p *VideoPredictReq)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageInfo, 0, size)
  p.Frames =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &ImageInfo{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Frames = append(p.Frames, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VideoPredictReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key8 = v
}
var _val9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val9 = v
}
    p.Extra[_key8] = _val9
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *VideoPredictReq)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *VideoPredictReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VideoPredictReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VideoPredictReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("video_url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:video_url: ", p), err) }
  if err := oprot.WriteString(string(p.VideoURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.video_url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:video_url: ", p), err) }
  return err
}

func (p *VideoPredictReq) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetFrames() {
    if err := oprot.WriteFieldBegin("frames", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:frames: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Frames)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Frames {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:frames: ", p), err) }
  }
  return err
}

func (p *VideoPredictReq) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  }
  return err
}

func (p *VideoPredictReq) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBase() {
    if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err) }
    if err := p.Base.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err) }
  }
  return err
}

func (p *VideoPredictReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VideoPredictReq(%+v)", *p)
}

// Attributes:
//  - GifURL
//  - Frames
//  - Extra
//  - Base
type GifPredictReq struct {
  GifURL string `thrift:"gif_url,1" db:"gif_url" json:"gif_url"`
  Frames []*ImageInfo `thrift:"frames,2" db:"frames" json:"frames,omitempty"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra,omitempty"`
  // unused fields # 4 to 254
  Base *base.Base `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewGifPredictReq() *GifPredictReq {
  return &GifPredictReq{}
}


func (p *GifPredictReq) GetGifURL() string {
  return p.GifURL
}
var GifPredictReq_Frames_DEFAULT []*ImageInfo

func (p *GifPredictReq) GetFrames() []*ImageInfo {
  return p.Frames
}
var GifPredictReq_Extra_DEFAULT map[string]string

func (p *GifPredictReq) GetExtra() map[string]string {
  return p.Extra
}
var GifPredictReq_Base_DEFAULT *base.Base
func (p *GifPredictReq) GetBase() *base.Base {
  if !p.IsSetBase() {
    return GifPredictReq_Base_DEFAULT
  }
return p.Base
}
func (p *GifPredictReq) IsSetFrames() bool {
  return p.Frames != nil
}

func (p *GifPredictReq) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *GifPredictReq) IsSetBase() bool {
  return p.Base != nil
}

func (p *GifPredictReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GifPredictReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GifURL = v
}
  return nil
}

func (p *GifPredictReq)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageInfo, 0, size)
  p.Frames =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &ImageInfo{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Frames = append(p.Frames, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GifPredictReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.Extra[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GifPredictReq)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *GifPredictReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GifPredictReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GifPredictReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gif_url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gif_url: ", p), err) }
  if err := oprot.WriteString(string(p.GifURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gif_url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gif_url: ", p), err) }
  return err
}

func (p *GifPredictReq) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetFrames() {
    if err := oprot.WriteFieldBegin("frames", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:frames: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Frames)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Frames {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:frames: ", p), err) }
  }
  return err
}

func (p *GifPredictReq) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  }
  return err
}

func (p *GifPredictReq) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBase() {
    if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err) }
    if err := p.Base.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err) }
  }
  return err
}

func (p *GifPredictReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GifPredictReq(%+v)", *p)
}

// Attributes:
//  - PredictResults
//  - ModelVersion
//  - BaseResp
type VideoTagPredictRsp struct {
  PredictResults []*TagPredictResult_ `thrift:"predict_results,1" db:"predict_results" json:"predict_results"`
  ModelVersion *ModelVersion `thrift:"model_version,2" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 3 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewVideoTagPredictRsp() *VideoTagPredictRsp {
  return &VideoTagPredictRsp{}
}


func (p *VideoTagPredictRsp) GetPredictResults() []*TagPredictResult_ {
  return p.PredictResults
}
var VideoTagPredictRsp_ModelVersion_DEFAULT *ModelVersion
func (p *VideoTagPredictRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return VideoTagPredictRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var VideoTagPredictRsp_BaseResp_DEFAULT *base.BaseResp
func (p *VideoTagPredictRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return VideoTagPredictRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *VideoTagPredictRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *VideoTagPredictRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *VideoTagPredictRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VideoTagPredictRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TagPredictResult_, 0, size)
  p.PredictResults =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &TagPredictResult_{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.PredictResults = append(p.PredictResults, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VideoTagPredictRsp)  ReadField2(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *VideoTagPredictRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *VideoTagPredictRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VideoTagPredictRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VideoTagPredictRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("predict_results", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:predict_results: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PredictResults)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PredictResults {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:predict_results: ", p), err) }
  return err
}

func (p *VideoTagPredictRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_version: ", p), err) }
  }
  return err
}

func (p *VideoTagPredictRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *VideoTagPredictRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VideoTagPredictRsp(%+v)", *p)
}

// Attributes:
//  - PredictResult_
//  - ModelVersion
//  - BaseResp
type ImageTagPredictRsp struct {
  PredictResult_ *TagPredictResult_ `thrift:"predict_result,1" db:"predict_result" json:"predict_result"`
  ModelVersion *ModelVersion `thrift:"model_version,2" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 3 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewImageTagPredictRsp() *ImageTagPredictRsp {
  return &ImageTagPredictRsp{}
}

var ImageTagPredictRsp_PredictResult__DEFAULT *TagPredictResult_
func (p *ImageTagPredictRsp) GetPredictResult_() *TagPredictResult_ {
  if !p.IsSetPredictResult_() {
    return ImageTagPredictRsp_PredictResult__DEFAULT
  }
return p.PredictResult_
}
var ImageTagPredictRsp_ModelVersion_DEFAULT *ModelVersion
func (p *ImageTagPredictRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return ImageTagPredictRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var ImageTagPredictRsp_BaseResp_DEFAULT *base.BaseResp
func (p *ImageTagPredictRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return ImageTagPredictRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *ImageTagPredictRsp) IsSetPredictResult_() bool {
  return p.PredictResult_ != nil
}

func (p *ImageTagPredictRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *ImageTagPredictRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *ImageTagPredictRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageTagPredictRsp)  ReadField1(iprot thrift.TProtocol) error {
  p.PredictResult_ = &TagPredictResult_{}
  if err := p.PredictResult_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PredictResult_), err)
  }
  return nil
}

func (p *ImageTagPredictRsp)  ReadField2(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *ImageTagPredictRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *ImageTagPredictRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageTagPredictRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageTagPredictRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("predict_result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:predict_result: ", p), err) }
  if err := p.PredictResult_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PredictResult_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:predict_result: ", p), err) }
  return err
}

func (p *ImageTagPredictRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_version: ", p), err) }
  }
  return err
}

func (p *ImageTagPredictRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *ImageTagPredictRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageTagPredictRsp(%+v)", *p)
}

// Attributes:
//  - Boxes
//  - Masks
//  - ClassMap
//  - ModelVersion
//  - BaseResp
type VideoSegRsp struct {
  Boxes [][]*BoundingBox `thrift:"boxes,1" db:"boxes" json:"boxes"`
  Masks [][]byte `thrift:"masks,2" db:"masks" json:"masks"`
  ClassMap map[int32]string `thrift:"class_map,3" db:"class_map" json:"class_map"`
  ModelVersion *ModelVersion `thrift:"model_version,4" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 5 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewVideoSegRsp() *VideoSegRsp {
  return &VideoSegRsp{}
}


func (p *VideoSegRsp) GetBoxes() [][]*BoundingBox {
  return p.Boxes
}

func (p *VideoSegRsp) GetMasks() [][]byte {
  return p.Masks
}

func (p *VideoSegRsp) GetClassMap() map[int32]string {
  return p.ClassMap
}
var VideoSegRsp_ModelVersion_DEFAULT *ModelVersion
func (p *VideoSegRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return VideoSegRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var VideoSegRsp_BaseResp_DEFAULT *base.BaseResp
func (p *VideoSegRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return VideoSegRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *VideoSegRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *VideoSegRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *VideoSegRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VideoSegRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]*BoundingBox, 0, size)
  p.Boxes =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*BoundingBox, 0, size)
    _elem14 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem15 := &BoundingBox{}
      if err := _elem15.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
      }
      _elem14 = append(_elem14, _elem15)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Boxes = append(p.Boxes, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VideoSegRsp)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Masks =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.Masks = append(p.Masks, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VideoSegRsp)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]string, size)
  p.ClassMap =  tMap
  for i := 0; i < size; i ++ {
var _key17 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key17 = v
}
var _val18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val18 = v
}
    p.ClassMap[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *VideoSegRsp)  ReadField4(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *VideoSegRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *VideoSegRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VideoSegRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VideoSegRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("boxes", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boxes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.LIST, len(p.Boxes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Boxes {
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boxes: ", p), err) }
  return err
}

func (p *VideoSegRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("masks", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:masks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Masks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Masks {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:masks: ", p), err) }
  return err
}

func (p *VideoSegRsp) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("class_map", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:class_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.ClassMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ClassMap {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:class_map: ", p), err) }
  return err
}

func (p *VideoSegRsp) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:model_version: ", p), err) }
  }
  return err
}

func (p *VideoSegRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *VideoSegRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VideoSegRsp(%+v)", *p)
}

// Attributes:
//  - Boxes
//  - Mask
//  - ClassMap
//  - ModelVersion
//  - BaseResp
type ImageSegRsp struct {
  Boxes []*BoundingBox `thrift:"boxes,1" db:"boxes" json:"boxes"`
  Mask []byte `thrift:"mask,2" db:"mask" json:"mask"`
  ClassMap map[int32]string `thrift:"class_map,3" db:"class_map" json:"class_map"`
  ModelVersion *ModelVersion `thrift:"model_version,4" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 5 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewImageSegRsp() *ImageSegRsp {
  return &ImageSegRsp{}
}


func (p *ImageSegRsp) GetBoxes() []*BoundingBox {
  return p.Boxes
}

func (p *ImageSegRsp) GetMask() []byte {
  return p.Mask
}

func (p *ImageSegRsp) GetClassMap() map[int32]string {
  return p.ClassMap
}
var ImageSegRsp_ModelVersion_DEFAULT *ModelVersion
func (p *ImageSegRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return ImageSegRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var ImageSegRsp_BaseResp_DEFAULT *base.BaseResp
func (p *ImageSegRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return ImageSegRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *ImageSegRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *ImageSegRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *ImageSegRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageSegRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BoundingBox, 0, size)
  p.Boxes =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &BoundingBox{}
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Boxes = append(p.Boxes, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageSegRsp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mask = v
}
  return nil
}

func (p *ImageSegRsp)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]string, size)
  p.ClassMap =  tMap
  for i := 0; i < size; i ++ {
var _key20 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key20 = v
}
var _val21 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val21 = v
}
    p.ClassMap[_key20] = _val21
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ImageSegRsp)  ReadField4(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *ImageSegRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *ImageSegRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageSegRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageSegRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("boxes", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boxes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Boxes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Boxes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boxes: ", p), err) }
  return err
}

func (p *ImageSegRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mask", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mask: ", p), err) }
  if err := oprot.WriteBinary(p.Mask); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mask (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mask: ", p), err) }
  return err
}

func (p *ImageSegRsp) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("class_map", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:class_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.ClassMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ClassMap {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:class_map: ", p), err) }
  return err
}

func (p *ImageSegRsp) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:model_version: ", p), err) }
  }
  return err
}

func (p *ImageSegRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *ImageSegRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageSegRsp(%+v)", *p)
}

// Attributes:
//  - Result_
//  - ModelVersion
//  - BaseResp
type ImageDetRsp struct {
  Result_ []*BoundingBox `thrift:"result,1" db:"result" json:"result"`
  ModelVersion *ModelVersion `thrift:"model_version,2" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 3 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewImageDetRsp() *ImageDetRsp {
  return &ImageDetRsp{}
}


func (p *ImageDetRsp) GetResult_() []*BoundingBox {
  return p.Result_
}
var ImageDetRsp_ModelVersion_DEFAULT *ModelVersion
func (p *ImageDetRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return ImageDetRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var ImageDetRsp_BaseResp_DEFAULT *base.BaseResp
func (p *ImageDetRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return ImageDetRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *ImageDetRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *ImageDetRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *ImageDetRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageDetRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BoundingBox, 0, size)
  p.Result_ =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &BoundingBox{}
    if err := _elem22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.Result_ = append(p.Result_, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageDetRsp)  ReadField2(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *ImageDetRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *ImageDetRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageDetRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageDetRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Result_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Result_ {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ImageDetRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_version: ", p), err) }
  }
  return err
}

func (p *ImageDetRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *ImageDetRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageDetRsp(%+v)", *p)
}

// Attributes:
//  - Results
//  - ModelVersion
//  - BaseResp
type VideoDetRsp struct {
  Results [][]*BoundingBox `thrift:"results,1" db:"results" json:"results"`
  ModelVersion *ModelVersion `thrift:"model_version,2" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 3 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewVideoDetRsp() *VideoDetRsp {
  return &VideoDetRsp{}
}


func (p *VideoDetRsp) GetResults() [][]*BoundingBox {
  return p.Results
}
var VideoDetRsp_ModelVersion_DEFAULT *ModelVersion
func (p *VideoDetRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return VideoDetRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var VideoDetRsp_BaseResp_DEFAULT *base.BaseResp
func (p *VideoDetRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return VideoDetRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *VideoDetRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *VideoDetRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *VideoDetRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VideoDetRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]*BoundingBox, 0, size)
  p.Results =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*BoundingBox, 0, size)
    _elem23 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem24 := &BoundingBox{}
      if err := _elem24.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
      }
      _elem23 = append(_elem23, _elem24)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Results = append(p.Results, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VideoDetRsp)  ReadField2(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *VideoDetRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *VideoDetRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VideoDetRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VideoDetRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("results", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:results: ", p), err) }
  if err := oprot.WriteListBegin(thrift.LIST, len(p.Results)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Results {
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:results: ", p), err) }
  return err
}

func (p *VideoDetRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_version: ", p), err) }
  }
  return err
}

func (p *VideoDetRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *VideoDetRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VideoDetRsp(%+v)", *p)
}

// Attributes:
//  - Result_
//  - ModelVersion
//  - BaseResp
type ImageFaceRsp struct {
  Result_ []FaceExpTypes `thrift:"result,1" db:"result" json:"result"`
  ModelVersion *ModelVersion `thrift:"model_version,2" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 3 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewImageFaceRsp() *ImageFaceRsp {
  return &ImageFaceRsp{}
}


func (p *ImageFaceRsp) GetResult_() []FaceExpTypes {
  return p.Result_
}
var ImageFaceRsp_ModelVersion_DEFAULT *ModelVersion
func (p *ImageFaceRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return ImageFaceRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var ImageFaceRsp_BaseResp_DEFAULT *base.BaseResp
func (p *ImageFaceRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return ImageFaceRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *ImageFaceRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *ImageFaceRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *ImageFaceRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageFaceRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]FaceExpTypes, 0, size)
  p.Result_ =  tSlice
  for i := 0; i < size; i ++ {
var _elem25 FaceExpTypes
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := FaceExpTypes(v)
    _elem25 = temp
}
    p.Result_ = append(p.Result_, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageFaceRsp)  ReadField2(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *ImageFaceRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *ImageFaceRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageFaceRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageFaceRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Result_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Result_ {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ImageFaceRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_version: ", p), err) }
  }
  return err
}

func (p *ImageFaceRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *ImageFaceRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageFaceRsp(%+v)", *p)
}

// Attributes:
//  - Results
//  - ModelVersion
//  - BaseResp
type VideoFaceRsp struct {
  Results [][]FaceExpTypes `thrift:"results,1" db:"results" json:"results"`
  ModelVersion *ModelVersion `thrift:"model_version,2" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 3 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewVideoFaceRsp() *VideoFaceRsp {
  return &VideoFaceRsp{}
}


func (p *VideoFaceRsp) GetResults() [][]FaceExpTypes {
  return p.Results
}
var VideoFaceRsp_ModelVersion_DEFAULT *ModelVersion
func (p *VideoFaceRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return VideoFaceRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var VideoFaceRsp_BaseResp_DEFAULT *base.BaseResp
func (p *VideoFaceRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return VideoFaceRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *VideoFaceRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *VideoFaceRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *VideoFaceRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VideoFaceRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]FaceExpTypes, 0, size)
  p.Results =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]FaceExpTypes, 0, size)
    _elem26 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem27 FaceExpTypes
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := FaceExpTypes(v)
      _elem27 = temp
}
      _elem26 = append(_elem26, _elem27)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Results = append(p.Results, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VideoFaceRsp)  ReadField2(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *VideoFaceRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *VideoFaceRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VideoFaceRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VideoFaceRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("results", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:results: ", p), err) }
  if err := oprot.WriteListBegin(thrift.LIST, len(p.Results)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Results {
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:results: ", p), err) }
  return err
}

func (p *VideoFaceRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_version: ", p), err) }
  }
  return err
}

func (p *VideoFaceRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *VideoFaceRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VideoFaceRsp(%+v)", *p)
}

// Attributes:
//  - Result_
//  - JointType
//  - ModelVersion
//  - BaseResp
type ImageJointRsp struct {
  Result_ []FaceExpTypes `thrift:"result,1" db:"result" json:"result"`
  JointType []AccLevel `thrift:"joint_type,2" db:"joint_type" json:"joint_type"`
  ModelVersion *ModelVersion `thrift:"model_version,3" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 4 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewImageJointRsp() *ImageJointRsp {
  return &ImageJointRsp{}
}


func (p *ImageJointRsp) GetResult_() []FaceExpTypes {
  return p.Result_
}

func (p *ImageJointRsp) GetJointType() []AccLevel {
  return p.JointType
}
var ImageJointRsp_ModelVersion_DEFAULT *ModelVersion
func (p *ImageJointRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return ImageJointRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var ImageJointRsp_BaseResp_DEFAULT *base.BaseResp
func (p *ImageJointRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return ImageJointRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *ImageJointRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *ImageJointRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *ImageJointRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageJointRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]FaceExpTypes, 0, size)
  p.Result_ =  tSlice
  for i := 0; i < size; i ++ {
var _elem28 FaceExpTypes
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := FaceExpTypes(v)
    _elem28 = temp
}
    p.Result_ = append(p.Result_, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageJointRsp)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]AccLevel, 0, size)
  p.JointType =  tSlice
  for i := 0; i < size; i ++ {
var _elem29 AccLevel
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := AccLevel(v)
    _elem29 = temp
}
    p.JointType = append(p.JointType, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageJointRsp)  ReadField3(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *ImageJointRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *ImageJointRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageJointRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageJointRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Result_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Result_ {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ImageJointRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("joint_type", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:joint_type: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.JointType)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.JointType {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:joint_type: ", p), err) }
  return err
}

func (p *ImageJointRsp) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:model_version: ", p), err) }
  }
  return err
}

func (p *ImageJointRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *ImageJointRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageJointRsp(%+v)", *p)
}

// Attributes:
//  - Results
//  - JointTypes
//  - ModelVersion
//  - BaseResp
type VideoJointRsp struct {
  Results [][]FaceExpTypes `thrift:"results,1" db:"results" json:"results"`
  JointTypes [][]AccLevel `thrift:"joint_types,2" db:"joint_types" json:"joint_types"`
  ModelVersion *ModelVersion `thrift:"model_version,3" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 4 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewVideoJointRsp() *VideoJointRsp {
  return &VideoJointRsp{}
}


func (p *VideoJointRsp) GetResults() [][]FaceExpTypes {
  return p.Results
}

func (p *VideoJointRsp) GetJointTypes() [][]AccLevel {
  return p.JointTypes
}
var VideoJointRsp_ModelVersion_DEFAULT *ModelVersion
func (p *VideoJointRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return VideoJointRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var VideoJointRsp_BaseResp_DEFAULT *base.BaseResp
func (p *VideoJointRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return VideoJointRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *VideoJointRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *VideoJointRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *VideoJointRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VideoJointRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]FaceExpTypes, 0, size)
  p.Results =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]FaceExpTypes, 0, size)
    _elem30 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem31 FaceExpTypes
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := FaceExpTypes(v)
      _elem31 = temp
}
      _elem30 = append(_elem30, _elem31)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Results = append(p.Results, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VideoJointRsp)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]AccLevel, 0, size)
  p.JointTypes =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]AccLevel, 0, size)
    _elem32 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem33 AccLevel
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := AccLevel(v)
      _elem33 = temp
}
      _elem32 = append(_elem32, _elem33)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.JointTypes = append(p.JointTypes, _elem32)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VideoJointRsp)  ReadField3(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *VideoJointRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *VideoJointRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VideoJointRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VideoJointRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("results", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:results: ", p), err) }
  if err := oprot.WriteListBegin(thrift.LIST, len(p.Results)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Results {
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:results: ", p), err) }
  return err
}

func (p *VideoJointRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("joint_types", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:joint_types: ", p), err) }
  if err := oprot.WriteListBegin(thrift.LIST, len(p.JointTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.JointTypes {
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:joint_types: ", p), err) }
  return err
}

func (p *VideoJointRsp) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:model_version: ", p), err) }
  }
  return err
}

func (p *VideoJointRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *VideoJointRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VideoJointRsp(%+v)", *p)
}

// Attributes:
//  - Images
//  - Extra
//  - Base
type DetectAndEraseReq struct {
  Images []*ImageSpec `thrift:"images,1" db:"images" json:"images"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra,omitempty"`
  // unused fields # 3 to 254
  Base *base.Base `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewDetectAndEraseReq() *DetectAndEraseReq {
  return &DetectAndEraseReq{}
}


func (p *DetectAndEraseReq) GetImages() []*ImageSpec {
  return p.Images
}
var DetectAndEraseReq_Extra_DEFAULT map[string]string

func (p *DetectAndEraseReq) GetExtra() map[string]string {
  return p.Extra
}
var DetectAndEraseReq_Base_DEFAULT *base.Base
func (p *DetectAndEraseReq) GetBase() *base.Base {
  if !p.IsSetBase() {
    return DetectAndEraseReq_Base_DEFAULT
  }
return p.Base
}
func (p *DetectAndEraseReq) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *DetectAndEraseReq) IsSetBase() bool {
  return p.Base != nil
}

func (p *DetectAndEraseReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DetectAndEraseReq)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageSpec, 0, size)
  p.Images =  tSlice
  for i := 0; i < size; i ++ {
    _elem34 := &ImageSpec{}
    if err := _elem34.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
    }
    p.Images = append(p.Images, _elem34)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DetectAndEraseReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key35 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key35 = v
}
var _val36 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val36 = v
}
    p.Extra[_key35] = _val36
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DetectAndEraseReq)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *DetectAndEraseReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DetectAndEraseReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DetectAndEraseReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("images", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:images: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Images)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Images {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:images: ", p), err) }
  return err
}

func (p *DetectAndEraseReq) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  }
  return err
}

func (p *DetectAndEraseReq) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBase() {
    if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err) }
    if err := p.Base.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err) }
  }
  return err
}

func (p *DetectAndEraseReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DetectAndEraseReq(%+v)", *p)
}

// Attributes:
//  - Images
//  - Boxes
//  - ModelVersion
//  - BaseResp
type DetectAndEraseRsp struct {
  Images []*ImageInfo `thrift:"images,1" db:"images" json:"images"`
  Boxes [][]*BoundingBox `thrift:"boxes,2" db:"boxes" json:"boxes"`
  // unused fields # 3 to 199
  ModelVersion *ModelVersion `thrift:"model_version,200" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 201 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewDetectAndEraseRsp() *DetectAndEraseRsp {
  return &DetectAndEraseRsp{}
}


func (p *DetectAndEraseRsp) GetImages() []*ImageInfo {
  return p.Images
}

func (p *DetectAndEraseRsp) GetBoxes() [][]*BoundingBox {
  return p.Boxes
}
var DetectAndEraseRsp_ModelVersion_DEFAULT *ModelVersion
func (p *DetectAndEraseRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return DetectAndEraseRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var DetectAndEraseRsp_BaseResp_DEFAULT *base.BaseResp
func (p *DetectAndEraseRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return DetectAndEraseRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *DetectAndEraseRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *DetectAndEraseRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *DetectAndEraseRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 200:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField200(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DetectAndEraseRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageInfo, 0, size)
  p.Images =  tSlice
  for i := 0; i < size; i ++ {
    _elem37 := &ImageInfo{}
    if err := _elem37.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
    }
    p.Images = append(p.Images, _elem37)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DetectAndEraseRsp)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]*BoundingBox, 0, size)
  p.Boxes =  tSlice
  for i := 0; i < size; i ++ {
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*BoundingBox, 0, size)
    _elem38 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem39 := &BoundingBox{}
      if err := _elem39.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
      }
      _elem38 = append(_elem38, _elem39)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Boxes = append(p.Boxes, _elem38)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DetectAndEraseRsp)  ReadField200(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *DetectAndEraseRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *DetectAndEraseRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DetectAndEraseRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField200(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DetectAndEraseRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("images", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:images: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Images)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Images {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:images: ", p), err) }
  return err
}

func (p *DetectAndEraseRsp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("boxes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:boxes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.LIST, len(p.Boxes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Boxes {
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:boxes: ", p), err) }
  return err
}

func (p *DetectAndEraseRsp) writeField200(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 200); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 200:model_version: ", p), err) }
  }
  return err
}

func (p *DetectAndEraseRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *DetectAndEraseRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DetectAndEraseRsp(%+v)", *p)
}

// Attributes:
//  - Spec
//  - UseBoxes
//  - Mask
//  - Boxes
type ImageInpaintSpec struct {
  Spec *ImageSpec `thrift:"spec,1" db:"spec" json:"spec"`
  UseBoxes bool `thrift:"use_boxes,2" db:"use_boxes" json:"use_boxes"`
  Mask *ImageInfo `thrift:"mask,3" db:"mask" json:"mask,omitempty"`
  Boxes []*BoundingBox `thrift:"boxes,4" db:"boxes" json:"boxes,omitempty"`
}

func NewImageInpaintSpec() *ImageInpaintSpec {
  return &ImageInpaintSpec{}
}

var ImageInpaintSpec_Spec_DEFAULT *ImageSpec
func (p *ImageInpaintSpec) GetSpec() *ImageSpec {
  if !p.IsSetSpec() {
    return ImageInpaintSpec_Spec_DEFAULT
  }
return p.Spec
}

func (p *ImageInpaintSpec) GetUseBoxes() bool {
  return p.UseBoxes
}
var ImageInpaintSpec_Mask_DEFAULT *ImageInfo
func (p *ImageInpaintSpec) GetMask() *ImageInfo {
  if !p.IsSetMask() {
    return ImageInpaintSpec_Mask_DEFAULT
  }
return p.Mask
}
var ImageInpaintSpec_Boxes_DEFAULT []*BoundingBox

func (p *ImageInpaintSpec) GetBoxes() []*BoundingBox {
  return p.Boxes
}
func (p *ImageInpaintSpec) IsSetSpec() bool {
  return p.Spec != nil
}

func (p *ImageInpaintSpec) IsSetMask() bool {
  return p.Mask != nil
}

func (p *ImageInpaintSpec) IsSetBoxes() bool {
  return p.Boxes != nil
}

func (p *ImageInpaintSpec) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageInpaintSpec)  ReadField1(iprot thrift.TProtocol) error {
  p.Spec = &ImageSpec{}
  if err := p.Spec.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spec), err)
  }
  return nil
}

func (p *ImageInpaintSpec)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UseBoxes = v
}
  return nil
}

func (p *ImageInpaintSpec)  ReadField3(iprot thrift.TProtocol) error {
  p.Mask = &ImageInfo{}
  if err := p.Mask.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mask), err)
  }
  return nil
}

func (p *ImageInpaintSpec)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BoundingBox, 0, size)
  p.Boxes =  tSlice
  for i := 0; i < size; i ++ {
    _elem40 := &BoundingBox{}
    if err := _elem40.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
    }
    p.Boxes = append(p.Boxes, _elem40)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImageInpaintSpec) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageInpaintSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageInpaintSpec) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spec", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spec: ", p), err) }
  if err := p.Spec.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spec), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spec: ", p), err) }
  return err
}

func (p *ImageInpaintSpec) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("use_boxes", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:use_boxes: ", p), err) }
  if err := oprot.WriteBool(bool(p.UseBoxes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.use_boxes (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:use_boxes: ", p), err) }
  return err
}

func (p *ImageInpaintSpec) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMask() {
    if err := oprot.WriteFieldBegin("mask", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mask: ", p), err) }
    if err := p.Mask.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mask), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mask: ", p), err) }
  }
  return err
}

func (p *ImageInpaintSpec) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetBoxes() {
    if err := oprot.WriteFieldBegin("boxes", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:boxes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Boxes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Boxes {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:boxes: ", p), err) }
  }
  return err
}

func (p *ImageInpaintSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageInpaintSpec(%+v)", *p)
}

// Attributes:
//  - Specs
//  - Extra
//  - Base
type ImagesInpaintReq struct {
  Specs []*ImageInpaintSpec `thrift:"specs,1" db:"specs" json:"specs"`
  // unused fields # 2 to 3
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra,omitempty"`
  // unused fields # 5 to 254
  Base *base.Base `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewImagesInpaintReq() *ImagesInpaintReq {
  return &ImagesInpaintReq{}
}


func (p *ImagesInpaintReq) GetSpecs() []*ImageInpaintSpec {
  return p.Specs
}
var ImagesInpaintReq_Extra_DEFAULT map[string]string

func (p *ImagesInpaintReq) GetExtra() map[string]string {
  return p.Extra
}
var ImagesInpaintReq_Base_DEFAULT *base.Base
func (p *ImagesInpaintReq) GetBase() *base.Base {
  if !p.IsSetBase() {
    return ImagesInpaintReq_Base_DEFAULT
  }
return p.Base
}
func (p *ImagesInpaintReq) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *ImagesInpaintReq) IsSetBase() bool {
  return p.Base != nil
}

func (p *ImagesInpaintReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImagesInpaintReq)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageInpaintSpec, 0, size)
  p.Specs =  tSlice
  for i := 0; i < size; i ++ {
    _elem41 := &ImageInpaintSpec{}
    if err := _elem41.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
    }
    p.Specs = append(p.Specs, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImagesInpaintReq)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key42 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key42 = v
}
var _val43 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val43 = v
}
    p.Extra[_key42] = _val43
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ImagesInpaintReq)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *ImagesInpaintReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImagesInpaintReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImagesInpaintReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("specs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:specs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Specs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Specs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:specs: ", p), err) }
  return err
}

func (p *ImagesInpaintReq) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  }
  return err
}

func (p *ImagesInpaintReq) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBase() {
    if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err) }
    if err := p.Base.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err) }
  }
  return err
}

func (p *ImagesInpaintReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImagesInpaintReq(%+v)", *p)
}

// Attributes:
//  - Images
//  - ModelVersion
//  - BaseResp
type ImagesInpaintRsp struct {
  Images []*ImageInfo `thrift:"images,1" db:"images" json:"images"`
  // unused fields # 2 to 199
  ModelVersion *ModelVersion `thrift:"model_version,200" db:"model_version" json:"model_version,omitempty"`
  // unused fields # 201 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewImagesInpaintRsp() *ImagesInpaintRsp {
  return &ImagesInpaintRsp{}
}


func (p *ImagesInpaintRsp) GetImages() []*ImageInfo {
  return p.Images
}
var ImagesInpaintRsp_ModelVersion_DEFAULT *ModelVersion
func (p *ImagesInpaintRsp) GetModelVersion() *ModelVersion {
  if !p.IsSetModelVersion() {
    return ImagesInpaintRsp_ModelVersion_DEFAULT
  }
return p.ModelVersion
}
var ImagesInpaintRsp_BaseResp_DEFAULT *base.BaseResp
func (p *ImagesInpaintRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return ImagesInpaintRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *ImagesInpaintRsp) IsSetModelVersion() bool {
  return p.ModelVersion != nil
}

func (p *ImagesInpaintRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *ImagesInpaintRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 200:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField200(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImagesInpaintRsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageInfo, 0, size)
  p.Images =  tSlice
  for i := 0; i < size; i ++ {
    _elem44 := &ImageInfo{}
    if err := _elem44.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
    }
    p.Images = append(p.Images, _elem44)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ImagesInpaintRsp)  ReadField200(iprot thrift.TProtocol) error {
  p.ModelVersion = &ModelVersion{}
  if err := p.ModelVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ModelVersion), err)
  }
  return nil
}

func (p *ImagesInpaintRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *ImagesInpaintRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImagesInpaintRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField200(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImagesInpaintRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("images", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:images: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Images)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Images {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:images: ", p), err) }
  return err
}

func (p *ImagesInpaintRsp) writeField200(oprot thrift.TProtocol) (err error) {
  if p.IsSetModelVersion() {
    if err := oprot.WriteFieldBegin("model_version", thrift.STRUCT, 200); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:model_version: ", p), err) }
    if err := p.ModelVersion.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ModelVersion), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 200:model_version: ", p), err) }
  }
  return err
}

func (p *ImagesInpaintRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *ImagesInpaintRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImagesInpaintRsp(%+v)", *p)
}

// Attributes:
//  - JSONScript
//  - Base
type ImageJsonReq struct {
  JSONScript string `thrift:"json_script,1" db:"json_script" json:"json_script"`
  // unused fields # 2 to 254
  Base *base.Base `thrift:"Base,255" db:"Base" json:"Base,omitempty"`
}

func NewImageJsonReq() *ImageJsonReq {
  return &ImageJsonReq{}
}


func (p *ImageJsonReq) GetJSONScript() string {
  return p.JSONScript
}
var ImageJsonReq_Base_DEFAULT *base.Base
func (p *ImageJsonReq) GetBase() *base.Base {
  if !p.IsSetBase() {
    return ImageJsonReq_Base_DEFAULT
  }
return p.Base
}
func (p *ImageJsonReq) IsSetBase() bool {
  return p.Base != nil
}

func (p *ImageJsonReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageJsonReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JSONScript = v
}
  return nil
}

func (p *ImageJsonReq)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *ImageJsonReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageJsonReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageJsonReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("json_script", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:json_script: ", p), err) }
  if err := oprot.WriteString(string(p.JSONScript)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.json_script (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:json_script: ", p), err) }
  return err
}

func (p *ImageJsonReq) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBase() {
    if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:Base: ", p), err) }
    if err := p.Base.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:Base: ", p), err) }
  }
  return err
}

func (p *ImageJsonReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageJsonReq(%+v)", *p)
}

// Attributes:
//  - JSONScript
//  - BaseResp
type ImageJsonRsp struct {
  JSONScript string `thrift:"json_script,1" db:"json_script" json:"json_script"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"BaseResp,255" db:"BaseResp" json:"BaseResp,omitempty"`
}

func NewImageJsonRsp() *ImageJsonRsp {
  return &ImageJsonRsp{}
}


func (p *ImageJsonRsp) GetJSONScript() string {
  return p.JSONScript
}
var ImageJsonRsp_BaseResp_DEFAULT *base.BaseResp
func (p *ImageJsonRsp) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return ImageJsonRsp_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *ImageJsonRsp) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *ImageJsonRsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageJsonRsp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JSONScript = v
}
  return nil
}

func (p *ImageJsonRsp)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *ImageJsonRsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageJsonRsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageJsonRsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("json_script", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:json_script: ", p), err) }
  if err := oprot.WriteString(string(p.JSONScript)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.json_script (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:json_script: ", p), err) }
  return err
}

func (p *ImageJsonRsp) writeField255(oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseResp() {
    if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:BaseResp: ", p), err) }
    if err := p.BaseResp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 255:BaseResp: ", p), err) }
  }
  return err
}

func (p *ImageJsonRsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageJsonRsp(%+v)", *p)
}

