// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cv_common

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"base"
	"cv_types"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var _ = cv_types.GoUnusedProtection__
type VisionServices interface {
  // Parameters:
  //  - Req
  Predict(ctx context.Context, req *cv_types.VideoPredictReq) (r *cv_types.VideoTagPredictRsp, err error)
  // Parameters:
  //  - Req
  Seg(ctx context.Context, req *cv_types.ImagePredictReq) (r *cv_types.ImageSegRsp, err error)
  // Parameters:
  //  - Req
  Detect(ctx context.Context, req *cv_types.ImagePredictReq) (r *cv_types.ImageDetRsp, err error)
  // Parameters:
  //  - Req
  Reg(ctx context.Context, req *cv_types.ImagePredictReq) (r *cv_types.ImageFaceRsp, err error)
  // Parameters:
  //  - Req
  Est(ctx context.Context, req *cv_types.ImagePredictReq) (r *cv_types.ImageJointRsp, err error)
  // Parameters:
  //  - Req
  Inpaint(ctx context.Context, req *cv_types.ImagesInpaintReq) (r *cv_types.ImagesInpaintRsp, err error)
  // Parameters:
  //  - Req
  GetModelVersion(ctx context.Context, req *cv_types.ModelVersionReq) (r *cv_types.ModelVersionRsp, err error)
  // Parameters:
  //  - Req
  RunJson(ctx context.Context, req *cv_types.ImageJsonReq) (r *cv_types.ImageJsonRsp, err error)
}

type VisionServicesClient struct {
  c thrift.TClient
}

func NewVisionServicesClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VisionServicesClient {
  return &VisionServicesClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewVisionServicesClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VisionServicesClient {
  return &VisionServicesClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewVisionServicesClient(c thrift.TClient) *VisionServicesClient {
  return &VisionServicesClient{
    c: c,
  }
}

func (p *VisionServicesClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *VisionServicesClient) Predict(ctx context.Context, req *cv_types.VideoPredictReq) (r *cv_types.VideoTagPredictRsp, err error) {
  var _args0 VisionServicesPredictArgs
  _args0.Req = req
  var _result1 VisionServicesPredictResult
  if err = p.Client_().Call(ctx, "Predict", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Exp!= nil:
    return r, _result1.Exp
  }

  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *VisionServicesClient) Seg(ctx context.Context, req *cv_types.ImagePredictReq) (r *cv_types.ImageSegRsp, err error) {
  var _args2 VisionServicesSegArgs
  _args2.Req = req
  var _result3 VisionServicesSegResult
  if err = p.Client_().Call(ctx, "Seg", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *VisionServicesClient) Detect(ctx context.Context, req *cv_types.ImagePredictReq) (r *cv_types.ImageDetRsp, err error) {
  var _args4 VisionServicesDetectArgs
  _args4.Req = req
  var _result5 VisionServicesDetectResult
  if err = p.Client_().Call(ctx, "Detect", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *VisionServicesClient) Reg(ctx context.Context, req *cv_types.ImagePredictReq) (r *cv_types.ImageFaceRsp, err error) {
  var _args6 VisionServicesRegArgs
  _args6.Req = req
  var _result7 VisionServicesRegResult
  if err = p.Client_().Call(ctx, "Reg", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *VisionServicesClient) Est(ctx context.Context, req *cv_types.ImagePredictReq) (r *cv_types.ImageJointRsp, err error) {
  var _args8 VisionServicesEstArgs
  _args8.Req = req
  var _result9 VisionServicesEstResult
  if err = p.Client_().Call(ctx, "Est", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *VisionServicesClient) Inpaint(ctx context.Context, req *cv_types.ImagesInpaintReq) (r *cv_types.ImagesInpaintRsp, err error) {
  var _args10 VisionServicesInpaintArgs
  _args10.Req = req
  var _result11 VisionServicesInpaintResult
  if err = p.Client_().Call(ctx, "Inpaint", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *VisionServicesClient) GetModelVersion(ctx context.Context, req *cv_types.ModelVersionReq) (r *cv_types.ModelVersionRsp, err error) {
  var _args12 VisionServicesGetModelVersionArgs
  _args12.Req = req
  var _result13 VisionServicesGetModelVersionResult
  if err = p.Client_().Call(ctx, "GetModelVersion", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *VisionServicesClient) RunJson(ctx context.Context, req *cv_types.ImageJsonReq) (r *cv_types.ImageJsonRsp, err error) {
  var _args14 VisionServicesRunJsonArgs
  _args14.Req = req
  var _result15 VisionServicesRunJsonResult
  if err = p.Client_().Call(ctx, "RunJson", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

type VisionServicesProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler VisionServices
}

func (p *VisionServicesProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *VisionServicesProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *VisionServicesProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewVisionServicesProcessor(handler VisionServices) *VisionServicesProcessor {

  self16 := &VisionServicesProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self16.processorMap["Predict"] = &visionServicesProcessorPredict{handler:handler}
  self16.processorMap["Seg"] = &visionServicesProcessorSeg{handler:handler}
  self16.processorMap["Detect"] = &visionServicesProcessorDetect{handler:handler}
  self16.processorMap["Reg"] = &visionServicesProcessorReg{handler:handler}
  self16.processorMap["Est"] = &visionServicesProcessorEst{handler:handler}
  self16.processorMap["Inpaint"] = &visionServicesProcessorInpaint{handler:handler}
  self16.processorMap["GetModelVersion"] = &visionServicesProcessorGetModelVersion{handler:handler}
  self16.processorMap["RunJson"] = &visionServicesProcessorRunJson{handler:handler}
return self16
}

func (p *VisionServicesProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x17.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x17

}

type visionServicesProcessorPredict struct {
  handler VisionServices
}

func (p *visionServicesProcessorPredict) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := VisionServicesPredictArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Predict", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := VisionServicesPredictResult{}
var retval *cv_types.VideoTagPredictRsp
  var err2 error
  if retval, err2 = p.handler.Predict(ctx, args.Req); err2 != nil {
  switch v := err2.(type) {
    case *cv_types.VisionException:
  result.Exp = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Predict: " + err2.Error())
    oprot.WriteMessageBegin("Predict", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Predict", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type visionServicesProcessorSeg struct {
  handler VisionServices
}

func (p *visionServicesProcessorSeg) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := VisionServicesSegArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Seg", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := VisionServicesSegResult{}
var retval *cv_types.ImageSegRsp
  var err2 error
  if retval, err2 = p.handler.Seg(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Seg: " + err2.Error())
    oprot.WriteMessageBegin("Seg", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Seg", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type visionServicesProcessorDetect struct {
  handler VisionServices
}

func (p *visionServicesProcessorDetect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := VisionServicesDetectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Detect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := VisionServicesDetectResult{}
var retval *cv_types.ImageDetRsp
  var err2 error
  if retval, err2 = p.handler.Detect(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Detect: " + err2.Error())
    oprot.WriteMessageBegin("Detect", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Detect", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type visionServicesProcessorReg struct {
  handler VisionServices
}

func (p *visionServicesProcessorReg) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := VisionServicesRegArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Reg", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := VisionServicesRegResult{}
var retval *cv_types.ImageFaceRsp
  var err2 error
  if retval, err2 = p.handler.Reg(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Reg: " + err2.Error())
    oprot.WriteMessageBegin("Reg", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Reg", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type visionServicesProcessorEst struct {
  handler VisionServices
}

func (p *visionServicesProcessorEst) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := VisionServicesEstArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Est", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := VisionServicesEstResult{}
var retval *cv_types.ImageJointRsp
  var err2 error
  if retval, err2 = p.handler.Est(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Est: " + err2.Error())
    oprot.WriteMessageBegin("Est", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Est", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type visionServicesProcessorInpaint struct {
  handler VisionServices
}

func (p *visionServicesProcessorInpaint) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := VisionServicesInpaintArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Inpaint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := VisionServicesInpaintResult{}
var retval *cv_types.ImagesInpaintRsp
  var err2 error
  if retval, err2 = p.handler.Inpaint(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Inpaint: " + err2.Error())
    oprot.WriteMessageBegin("Inpaint", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Inpaint", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type visionServicesProcessorGetModelVersion struct {
  handler VisionServices
}

func (p *visionServicesProcessorGetModelVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := VisionServicesGetModelVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetModelVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := VisionServicesGetModelVersionResult{}
var retval *cv_types.ModelVersionRsp
  var err2 error
  if retval, err2 = p.handler.GetModelVersion(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetModelVersion: " + err2.Error())
    oprot.WriteMessageBegin("GetModelVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetModelVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type visionServicesProcessorRunJson struct {
  handler VisionServices
}

func (p *visionServicesProcessorRunJson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := VisionServicesRunJsonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RunJson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := VisionServicesRunJsonResult{}
var retval *cv_types.ImageJsonRsp
  var err2 error
  if retval, err2 = p.handler.RunJson(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RunJson: " + err2.Error())
    oprot.WriteMessageBegin("RunJson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("RunJson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type VisionServicesPredictArgs struct {
  Req *cv_types.VideoPredictReq `thrift:"req,1" db:"req" json:"req"`
}

func NewVisionServicesPredictArgs() *VisionServicesPredictArgs {
  return &VisionServicesPredictArgs{}
}

var VisionServicesPredictArgs_Req_DEFAULT *cv_types.VideoPredictReq
func (p *VisionServicesPredictArgs) GetReq() *cv_types.VideoPredictReq {
  if !p.IsSetReq() {
    return VisionServicesPredictArgs_Req_DEFAULT
  }
return p.Req
}
func (p *VisionServicesPredictArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *VisionServicesPredictArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesPredictArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &cv_types.VideoPredictReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *VisionServicesPredictArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Predict_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesPredictArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *VisionServicesPredictArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesPredictArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Exp
type VisionServicesPredictResult struct {
  Success *cv_types.VideoTagPredictRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
  Exp *cv_types.VisionException `thrift:"exp,1" db:"exp" json:"exp,omitempty"`
}

func NewVisionServicesPredictResult() *VisionServicesPredictResult {
  return &VisionServicesPredictResult{}
}

var VisionServicesPredictResult_Success_DEFAULT *cv_types.VideoTagPredictRsp
func (p *VisionServicesPredictResult) GetSuccess() *cv_types.VideoTagPredictRsp {
  if !p.IsSetSuccess() {
    return VisionServicesPredictResult_Success_DEFAULT
  }
return p.Success
}
var VisionServicesPredictResult_Exp_DEFAULT *cv_types.VisionException
func (p *VisionServicesPredictResult) GetExp() *cv_types.VisionException {
  if !p.IsSetExp() {
    return VisionServicesPredictResult_Exp_DEFAULT
  }
return p.Exp
}
func (p *VisionServicesPredictResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *VisionServicesPredictResult) IsSetExp() bool {
  return p.Exp != nil
}

func (p *VisionServicesPredictResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesPredictResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &cv_types.VideoTagPredictRsp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *VisionServicesPredictResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Exp = &cv_types.VisionException{}
  if err := p.Exp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Exp), err)
  }
  return nil
}

func (p *VisionServicesPredictResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Predict_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesPredictResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *VisionServicesPredictResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExp() {
    if err := oprot.WriteFieldBegin("exp", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exp: ", p), err) }
    if err := p.Exp.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Exp), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exp: ", p), err) }
  }
  return err
}

func (p *VisionServicesPredictResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesPredictResult(%+v)", *p)
}

// Attributes:
//  - Req
type VisionServicesSegArgs struct {
  Req *cv_types.ImagePredictReq `thrift:"req,1" db:"req" json:"req"`
}

func NewVisionServicesSegArgs() *VisionServicesSegArgs {
  return &VisionServicesSegArgs{}
}

var VisionServicesSegArgs_Req_DEFAULT *cv_types.ImagePredictReq
func (p *VisionServicesSegArgs) GetReq() *cv_types.ImagePredictReq {
  if !p.IsSetReq() {
    return VisionServicesSegArgs_Req_DEFAULT
  }
return p.Req
}
func (p *VisionServicesSegArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *VisionServicesSegArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesSegArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &cv_types.ImagePredictReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *VisionServicesSegArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Seg_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesSegArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *VisionServicesSegArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesSegArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VisionServicesSegResult struct {
  Success *cv_types.ImageSegRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewVisionServicesSegResult() *VisionServicesSegResult {
  return &VisionServicesSegResult{}
}

var VisionServicesSegResult_Success_DEFAULT *cv_types.ImageSegRsp
func (p *VisionServicesSegResult) GetSuccess() *cv_types.ImageSegRsp {
  if !p.IsSetSuccess() {
    return VisionServicesSegResult_Success_DEFAULT
  }
return p.Success
}
func (p *VisionServicesSegResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *VisionServicesSegResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesSegResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &cv_types.ImageSegRsp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *VisionServicesSegResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Seg_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesSegResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *VisionServicesSegResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesSegResult(%+v)", *p)
}

// Attributes:
//  - Req
type VisionServicesDetectArgs struct {
  Req *cv_types.ImagePredictReq `thrift:"req,1" db:"req" json:"req"`
}

func NewVisionServicesDetectArgs() *VisionServicesDetectArgs {
  return &VisionServicesDetectArgs{}
}

var VisionServicesDetectArgs_Req_DEFAULT *cv_types.ImagePredictReq
func (p *VisionServicesDetectArgs) GetReq() *cv_types.ImagePredictReq {
  if !p.IsSetReq() {
    return VisionServicesDetectArgs_Req_DEFAULT
  }
return p.Req
}
func (p *VisionServicesDetectArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *VisionServicesDetectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesDetectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &cv_types.ImagePredictReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *VisionServicesDetectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Detect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesDetectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *VisionServicesDetectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesDetectArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VisionServicesDetectResult struct {
  Success *cv_types.ImageDetRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewVisionServicesDetectResult() *VisionServicesDetectResult {
  return &VisionServicesDetectResult{}
}

var VisionServicesDetectResult_Success_DEFAULT *cv_types.ImageDetRsp
func (p *VisionServicesDetectResult) GetSuccess() *cv_types.ImageDetRsp {
  if !p.IsSetSuccess() {
    return VisionServicesDetectResult_Success_DEFAULT
  }
return p.Success
}
func (p *VisionServicesDetectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *VisionServicesDetectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesDetectResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &cv_types.ImageDetRsp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *VisionServicesDetectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Detect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesDetectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *VisionServicesDetectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesDetectResult(%+v)", *p)
}

// Attributes:
//  - Req
type VisionServicesRegArgs struct {
  Req *cv_types.ImagePredictReq `thrift:"req,1" db:"req" json:"req"`
}

func NewVisionServicesRegArgs() *VisionServicesRegArgs {
  return &VisionServicesRegArgs{}
}

var VisionServicesRegArgs_Req_DEFAULT *cv_types.ImagePredictReq
func (p *VisionServicesRegArgs) GetReq() *cv_types.ImagePredictReq {
  if !p.IsSetReq() {
    return VisionServicesRegArgs_Req_DEFAULT
  }
return p.Req
}
func (p *VisionServicesRegArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *VisionServicesRegArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesRegArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &cv_types.ImagePredictReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *VisionServicesRegArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Reg_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesRegArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *VisionServicesRegArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesRegArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VisionServicesRegResult struct {
  Success *cv_types.ImageFaceRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewVisionServicesRegResult() *VisionServicesRegResult {
  return &VisionServicesRegResult{}
}

var VisionServicesRegResult_Success_DEFAULT *cv_types.ImageFaceRsp
func (p *VisionServicesRegResult) GetSuccess() *cv_types.ImageFaceRsp {
  if !p.IsSetSuccess() {
    return VisionServicesRegResult_Success_DEFAULT
  }
return p.Success
}
func (p *VisionServicesRegResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *VisionServicesRegResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesRegResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &cv_types.ImageFaceRsp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *VisionServicesRegResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Reg_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesRegResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *VisionServicesRegResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesRegResult(%+v)", *p)
}

// Attributes:
//  - Req
type VisionServicesEstArgs struct {
  Req *cv_types.ImagePredictReq `thrift:"req,1" db:"req" json:"req"`
}

func NewVisionServicesEstArgs() *VisionServicesEstArgs {
  return &VisionServicesEstArgs{}
}

var VisionServicesEstArgs_Req_DEFAULT *cv_types.ImagePredictReq
func (p *VisionServicesEstArgs) GetReq() *cv_types.ImagePredictReq {
  if !p.IsSetReq() {
    return VisionServicesEstArgs_Req_DEFAULT
  }
return p.Req
}
func (p *VisionServicesEstArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *VisionServicesEstArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesEstArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &cv_types.ImagePredictReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *VisionServicesEstArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Est_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesEstArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *VisionServicesEstArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesEstArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VisionServicesEstResult struct {
  Success *cv_types.ImageJointRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewVisionServicesEstResult() *VisionServicesEstResult {
  return &VisionServicesEstResult{}
}

var VisionServicesEstResult_Success_DEFAULT *cv_types.ImageJointRsp
func (p *VisionServicesEstResult) GetSuccess() *cv_types.ImageJointRsp {
  if !p.IsSetSuccess() {
    return VisionServicesEstResult_Success_DEFAULT
  }
return p.Success
}
func (p *VisionServicesEstResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *VisionServicesEstResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesEstResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &cv_types.ImageJointRsp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *VisionServicesEstResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Est_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesEstResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *VisionServicesEstResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesEstResult(%+v)", *p)
}

// Attributes:
//  - Req
type VisionServicesInpaintArgs struct {
  Req *cv_types.ImagesInpaintReq `thrift:"req,1" db:"req" json:"req"`
}

func NewVisionServicesInpaintArgs() *VisionServicesInpaintArgs {
  return &VisionServicesInpaintArgs{}
}

var VisionServicesInpaintArgs_Req_DEFAULT *cv_types.ImagesInpaintReq
func (p *VisionServicesInpaintArgs) GetReq() *cv_types.ImagesInpaintReq {
  if !p.IsSetReq() {
    return VisionServicesInpaintArgs_Req_DEFAULT
  }
return p.Req
}
func (p *VisionServicesInpaintArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *VisionServicesInpaintArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesInpaintArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &cv_types.ImagesInpaintReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *VisionServicesInpaintArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Inpaint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesInpaintArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *VisionServicesInpaintArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesInpaintArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VisionServicesInpaintResult struct {
  Success *cv_types.ImagesInpaintRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewVisionServicesInpaintResult() *VisionServicesInpaintResult {
  return &VisionServicesInpaintResult{}
}

var VisionServicesInpaintResult_Success_DEFAULT *cv_types.ImagesInpaintRsp
func (p *VisionServicesInpaintResult) GetSuccess() *cv_types.ImagesInpaintRsp {
  if !p.IsSetSuccess() {
    return VisionServicesInpaintResult_Success_DEFAULT
  }
return p.Success
}
func (p *VisionServicesInpaintResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *VisionServicesInpaintResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesInpaintResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &cv_types.ImagesInpaintRsp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *VisionServicesInpaintResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Inpaint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesInpaintResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *VisionServicesInpaintResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesInpaintResult(%+v)", *p)
}

// Attributes:
//  - Req
type VisionServicesGetModelVersionArgs struct {
  Req *cv_types.ModelVersionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewVisionServicesGetModelVersionArgs() *VisionServicesGetModelVersionArgs {
  return &VisionServicesGetModelVersionArgs{}
}

var VisionServicesGetModelVersionArgs_Req_DEFAULT *cv_types.ModelVersionReq
func (p *VisionServicesGetModelVersionArgs) GetReq() *cv_types.ModelVersionReq {
  if !p.IsSetReq() {
    return VisionServicesGetModelVersionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *VisionServicesGetModelVersionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *VisionServicesGetModelVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesGetModelVersionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &cv_types.ModelVersionReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *VisionServicesGetModelVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetModelVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesGetModelVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *VisionServicesGetModelVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesGetModelVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VisionServicesGetModelVersionResult struct {
  Success *cv_types.ModelVersionRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewVisionServicesGetModelVersionResult() *VisionServicesGetModelVersionResult {
  return &VisionServicesGetModelVersionResult{}
}

var VisionServicesGetModelVersionResult_Success_DEFAULT *cv_types.ModelVersionRsp
func (p *VisionServicesGetModelVersionResult) GetSuccess() *cv_types.ModelVersionRsp {
  if !p.IsSetSuccess() {
    return VisionServicesGetModelVersionResult_Success_DEFAULT
  }
return p.Success
}
func (p *VisionServicesGetModelVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *VisionServicesGetModelVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesGetModelVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &cv_types.ModelVersionRsp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *VisionServicesGetModelVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetModelVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesGetModelVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *VisionServicesGetModelVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesGetModelVersionResult(%+v)", *p)
}

// Attributes:
//  - Req
type VisionServicesRunJsonArgs struct {
  Req *cv_types.ImageJsonReq `thrift:"req,1" db:"req" json:"req"`
}

func NewVisionServicesRunJsonArgs() *VisionServicesRunJsonArgs {
  return &VisionServicesRunJsonArgs{}
}

var VisionServicesRunJsonArgs_Req_DEFAULT *cv_types.ImageJsonReq
func (p *VisionServicesRunJsonArgs) GetReq() *cv_types.ImageJsonReq {
  if !p.IsSetReq() {
    return VisionServicesRunJsonArgs_Req_DEFAULT
  }
return p.Req
}
func (p *VisionServicesRunJsonArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *VisionServicesRunJsonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesRunJsonArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &cv_types.ImageJsonReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *VisionServicesRunJsonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RunJson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesRunJsonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *VisionServicesRunJsonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesRunJsonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VisionServicesRunJsonResult struct {
  Success *cv_types.ImageJsonRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewVisionServicesRunJsonResult() *VisionServicesRunJsonResult {
  return &VisionServicesRunJsonResult{}
}

var VisionServicesRunJsonResult_Success_DEFAULT *cv_types.ImageJsonRsp
func (p *VisionServicesRunJsonResult) GetSuccess() *cv_types.ImageJsonRsp {
  if !p.IsSetSuccess() {
    return VisionServicesRunJsonResult_Success_DEFAULT
  }
return p.Success
}
func (p *VisionServicesRunJsonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *VisionServicesRunJsonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VisionServicesRunJsonResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &cv_types.ImageJsonRsp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *VisionServicesRunJsonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RunJson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VisionServicesRunJsonResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *VisionServicesRunJsonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VisionServicesRunJsonResult(%+v)", *p)
}


